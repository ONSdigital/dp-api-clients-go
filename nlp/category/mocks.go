// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package category

import (
	"context"
	healthcheck "github.com/ONSdigital/dp-api-clients-go/v2/health"
	"github.com/ONSdigital/dp-api-clients-go/v2/nlp/category/models"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-topic-api/sdk/errors"
	"sync"
)

// Ensure, that ClienterMock does implement Clienter.
// If this is not the case, regenerate this file with moq.
var _ Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of Clienter.
//
//	func TestSomethingThatUsesClienter(t *testing.T) {
//
//		// make and configure a mocked Clienter
//		mockedClienter := &ClienterMock{
//			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			GetCategoryFunc: func(ctx context.Context, options Options) (*[]models.Category, errors.Error) {
//				panic("mock out the GetCategory method")
//			},
//			HealthFunc: func() *healthcheck.Client {
//				panic("mock out the Health method")
//			},
//			URLFunc: func() string {
//				panic("mock out the URL method")
//			},
//		}
//
//		// use mockedClienter in code that requires Clienter
//		// and then make assertions.
//
//	}
type ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetCategoryFunc mocks the GetCategory method.
	GetCategoryFunc func(ctx context.Context, options Options) (*[]models.Category, errors.Error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *healthcheck.Client

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetCategory holds details about calls to the GetCategory method.
		GetCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options Options
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
	lockChecker     sync.RWMutex
	lockGetCategory sync.RWMutex
	lockHealth      sync.RWMutex
	lockURL         sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClienterMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClienterMock.CheckerFunc: method is nil but Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedClienter.CheckerCalls())
func (mock *ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetCategory calls GetCategoryFunc.
func (mock *ClienterMock) GetCategory(ctx context.Context, options Options) (*[]models.Category, errors.Error) {
	if mock.GetCategoryFunc == nil {
		panic("ClienterMock.GetCategoryFunc: method is nil but Clienter.GetCategory was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options Options
	}{
		Ctx:     ctx,
		Options: options,
	}
	mock.lockGetCategory.Lock()
	mock.calls.GetCategory = append(mock.calls.GetCategory, callInfo)
	mock.lockGetCategory.Unlock()
	return mock.GetCategoryFunc(ctx, options)
}

// GetCategoryCalls gets all the calls that were made to GetCategory.
// Check the length with:
//
//	len(mockedClienter.GetCategoryCalls())
func (mock *ClienterMock) GetCategoryCalls() []struct {
	Ctx     context.Context
	Options Options
} {
	var calls []struct {
		Ctx     context.Context
		Options Options
	}
	mock.lockGetCategory.RLock()
	calls = mock.calls.GetCategory
	mock.lockGetCategory.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClienterMock) Health() *healthcheck.Client {
	if mock.HealthFunc == nil {
		panic("ClienterMock.HealthFunc: method is nil but Clienter.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedClienter.HealthCalls())
func (mock *ClienterMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *ClienterMock) URL() string {
	if mock.URLFunc == nil {
		panic("ClienterMock.URLFunc: method is nil but Clienter.URL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	mock.lockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//
//	len(mockedClienter.URLCalls())
func (mock *ClienterMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURL.RLock()
	calls = mock.calls.URL
	mock.lockURL.RUnlock()
	return calls
}
